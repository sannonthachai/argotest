/**
 * simplebar-vue - v2.0.0-beta.10
 * Vue component for SimpleBar
 * https://grsmto.github.io/simplebar/
 *
 * Made by Piers Olenski
 * Under MIT License
 */

import SimpleBar from 'simplebar-core';

//
/* Deprecated
 * Hardcode this here until we can safely deprecated it.
 * Helper function to retrieve options from element attributes
 */

var getOptions = function getOptions(obj) {
  var options = Array.prototype.reduce.call(obj, function (acc, attribute) {
    var option = attribute.name.match(/data-simplebar-(.+)/);

    if (option) {
      var key = option[1].replace(/\W+(.)/g, function (x, chr) {
        return chr.toUpperCase();
      });

      switch (attribute.value) {
        case 'true':
          acc[key] = true;
          break;

        case 'false':
          acc[key] = false;
          break;

        case undefined:
          acc[key] = true;
          break;

        default:
          acc[key] = attribute.value;
      }
    }

    return acc;
  }, {});
  return options;
};

var script = {
  name: 'simplebar-vue',
  props: Object.keys(SimpleBar.defaultOptions),
  mounted: function mounted() {
    var deprecatedOptions = getOptions(this.$refs.element.attributes);

    if (Object.keys(deprecatedOptions).length) {
      console.warn("simplebar-vue: this way of passing options is deprecated. Pass it like normal props instead:\n        'data-simplebar-force-visible=\"true\"' \u2014> 'force-visible'\n      ");
    }

    this.SimpleBar = new SimpleBar(this.$refs.element, Object.assign({}, deprecatedOptions, this.props));
  },
  destroyed: function destroyed() {
    this.SimpleBar.unMount();
    this.SimpleBar = null;
  },
  computed: {
    scrollElement: function scrollElement() {
      return this.$refs.scrollElement;
    },
    contentElement: function contentElement() {
      return this.$refs.contentElement;
    }
  }
};

function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
        createInjectorSSR = createInjector;
        createInjector = shadowMode;
        shadowMode = false;
    }
    // Vue.extend constructor export interop.
    const options = typeof script === 'function' ? script.options : script;
    // render functions
    if (template && template.render) {
        options.render = template.render;
        options.staticRenderFns = template.staticRenderFns;
        options._compiled = true;
        // functional template
        if (isFunctionalTemplate) {
            options.functional = true;
        }
    }
    // scopedId
    if (scopeId) {
        options._scopeId = scopeId;
    }
    let hook;
    if (moduleIdentifier) {
        // server build
        hook = function (context) {
            // 2.3 injection
            context =
                context || // cached call
                    (this.$vnode && this.$vnode.ssrContext) || // stateful
                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
            // 2.2 with runInNewContext: true
            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                context = __VUE_SSR_CONTEXT__;
            }
            // inject component styles
            if (style) {
                style.call(this, createInjectorSSR(context));
            }
            // register component module identifier for async chunk inference
            if (context && context._registeredComponents) {
                context._registeredComponents.add(moduleIdentifier);
            }
        };
        // used by ssr in case component is cached and beforeCreate
        // never gets called
        options._ssrRegister = hook;
    }
    else if (style) {
        hook = shadowMode
            ? function (context) {
                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
            }
            : function (context) {
                style.call(this, createInjector(context));
            };
    }
    if (hook) {
        if (options.functional) {
            // register for functional component in vue file
            const originalRender = options.render;
            options.render = function renderWithStyleInjection(h, context) {
                hook.call(context);
                return originalRender(h, context);
            };
        }
        else {
            // inject component registration as beforeCreate hook
            const existing = options.beforeCreate;
            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
        }
    }
    return script;
}

/* script */
var __vue_script__ = script;
/* template */

var __vue_render__ = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c("div", {
    ref: "element"
  }, [_c("div", {
    staticClass: "simplebar-wrapper"
  }, [_vm._m(0), _vm._v(" "), _c("div", {
    staticClass: "simplebar-mask"
  }, [_c("div", {
    staticClass: "simplebar-offset"
  }, [_c("div", {
    ref: "scrollElement",
    staticClass: "simplebar-content-wrapper"
  }, [_c("div", {
    ref: "contentElement",
    staticClass: "simplebar-content"
  }, [_vm._t("default")], 2)])])]), _vm._v(" "), _c("div", {
    staticClass: "simplebar-placeholder"
  })]), _vm._v(" "), _vm._m(1), _vm._v(" "), _vm._m(2)]);
};

var __vue_staticRenderFns__ = [function () {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c("div", {
    staticClass: "simplebar-height-auto-observer-wrapper"
  }, [_c("div", {
    staticClass: "simplebar-height-auto-observer"
  })]);
}, function () {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c("div", {
    staticClass: "simplebar-track simplebar-horizontal"
  }, [_c("div", {
    staticClass: "simplebar-scrollbar"
  })]);
}, function () {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c("div", {
    staticClass: "simplebar-track simplebar-vertical"
  }, [_c("div", {
    staticClass: "simplebar-scrollbar"
  })]);
}];
__vue_render__._withStripped = true;
/* style */

var __vue_inject_styles__ = undefined;
/* scoped */

var __vue_scope_id__ = undefined;
/* module identifier */

var __vue_module_identifier__ = undefined;
/* functional template */

var __vue_is_functional_template__ = false;
/* style inject */

/* style inject SSR */

/* style inject shadow dom */

var __vue_component__ = /*#__PURE__*/normalizeComponent({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, undefined, undefined);

export default __vue_component__;
