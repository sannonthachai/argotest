import { Component } from 'vue';
import { ComponentObjectPropsOptions } from 'vue';
import { Content } from 'tippy.js';
import { CreateSingletonProps } from 'tippy.js';
import { DefaultProps } from 'tippy.js';
import { Directive } from 'vue';
import { Instance } from 'tippy.js';
import { Plugin as Plugin_2 } from 'vue';
import { Props } from 'tippy.js';
import { Ref } from 'vue';
import { roundArrow } from 'tippy.js';
import tippy from 'tippy.js';
import { VNode } from 'vue';

export declare const directive: Directive;

declare const plugin: Plugin_2;
export default plugin;
export { plugin }
export { roundArrow }

export declare const setDefaultProps: (partialProps: Partial<import("tippy.js").DefaultProps>) => void;

export declare const Tippy: import("vue").DefineComponent<ComponentObjectPropsOptions<Record<string, unknown>>, {
    tippy: import("vue").Ref<import("tippy.js").Instance<import("tippy.js").Props> | undefined>;
    refresh: () => void;
    refreshContent: () => void;
    setContent: (value: import("../types").TippyContent) => void;
    setProps: (value: Partial<Pick<import("tippy.js").Props, "animateFill" | "appendTo" | "aria" | "delay" | "duration" | "followCursor" | "getReferenceClientRect" | "hideOnClick" | "ignoreAttributes" | "inlinePositioning" | "interactive" | "interactiveBorder" | "interactiveDebounce" | "moveTransition" | "offset" | "placement" | "plugins" | "popperOptions" | "render" | "showOnCreate" | "sticky" | "touch" | "trigger" | "onAfterUpdate" | "onBeforeUpdate" | "onCreate" | "onDestroy" | "onHidden" | "onHide" | "onMount" | "onShow" | "onShown" | "onTrigger" | "onUntrigger" | "onClickOutside" | "allowHTML" | "animation" | "arrow" | "inertia" | "maxWidth" | "role" | "theme" | "zIndex"> & {
        content: import("../types").TippyContent;
        triggerTarget: import("../types").TippyTarget;
    }>) => void;
    destroy: () => void;
    hide: () => void;
    show: () => void;
    disable: () => void;
    enable: () => void;
    unmount: () => void;
    mount: () => void;
    elem: import("vue").Ref<Element | undefined>;
    contentElem: import("vue").Ref<Element | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    [x: string]: any;
}>, {}>;
export { tippy }

export declare type TippyComponent = InstanceType<typeof Tippy>;

export declare type TippyContent = Content | VNode | Component | Ref;

export declare type TippyInstance = Instance | Element | undefined;

export declare type TippyInstances = Ref<TippyInstance>[] | Ref<TippyInstance[]> | (() => TippyInstance[]);

export declare type TippyOptions = Partial<Omit<Props, 'content' | 'triggerTarget'> & {
    content: TippyContent;
    triggerTarget: TippyTarget;
}>;

export declare interface TippyPluginOptions {
    directive?: string;
    component?: string;
    componentSingleton?: string;
    defaultProps?: Partial<DefaultProps>;
}

export declare const TippySingleton: import("vue").DefineComponent<ComponentObjectPropsOptions<Record<string, unknown>>, {
    instances: import("vue").Ref<{
        clearDelayTimeouts: () => void;
        destroy: () => void;
        disable: () => void;
        enable: () => void;
        hide: () => void;
        hideWithInteractivity: (event: MouseEvent) => void;
        id: number;
        plugins: {
            name?: string | undefined;
            defaultValue?: any;
            fn: (instance: Instance<any>) => Partial<import("tippy.js").LifecycleHooks<any>>;
        }[];
        popper: import("tippy.js").PopperElement<any>;
        popperInstance: {
            state: {
                elements: {
                    reference: Element | {
                        getBoundingClientRect: () => ClientRect | DOMRect;
                        contextElement?: Element | undefined;
                    };
                    popper: HTMLElement;
                    arrow?: HTMLElement | undefined;
                };
                options: {
                    placement: import("@popperjs/core").Placement;
                    modifiers: any[];
                    strategy: import("@popperjs/core").PositioningStrategy;
                    onFirstUpdate?: ((arg0: Partial<import("@popperjs/core").State>) => void) | undefined;
                };
                placement: import("@popperjs/core").Placement;
                strategy: import("@popperjs/core").PositioningStrategy;
                orderedModifiers: {
                    name: any;
                    enabled: boolean;
                    phase: import("@popperjs/core").ModifierPhases;
                    requires?: string[] | undefined;
                    requiresIfExists?: string[] | undefined;
                    fn: (arg0: import("@popperjs/core").ModifierArguments<any>) => void | import("@popperjs/core").State;
                    effect?: ((arg0: import("@popperjs/core").ModifierArguments<any>) => void | (() => void)) | undefined;
                    options?: {
                        [x: string]: any;
                    } | undefined;
                    data?: {
                        [x: string]: any;
                    } | undefined;
                }[];
                rects: {
                    reference: {
                        width: number;
                        height: number;
                        x: number;
                        y: number;
                    };
                    popper: {
                        width: number;
                        height: number;
                        x: number;
                        y: number;
                    };
                };
                scrollParents: {
                    reference: (Element | {
                        innerHeight: number;
                        offsetHeight: number;
                        innerWidth: number;
                        offsetWidth: number;
                        pageXOffset: number;
                        pageYOffset: number;
                        getComputedStyle: typeof getComputedStyle;
                        addEventListener: (type: any, listener: any, optionsOrUseCapture?: any) => void;
                        removeEventListener: (type: any, listener: any, optionsOrUseCapture?: any) => void;
                        Element: Element;
                        HTMLElement: HTMLElement;
                        Node: Node;
                        toString: () => "[object Window]";
                        devicePixelRatio: number;
                        visualViewport?: {
                            addEventListener: (type: string, listener: EventListener | EventListenerObject | null, options?: boolean | AddEventListenerOptions | undefined) => void;
                            dispatchEvent: (event: Event) => boolean;
                            removeEventListener: (type: string, callback: EventListener | EventListenerObject | null, options?: boolean | EventListenerOptions | undefined) => void;
                            width: number;
                            height: number;
                            offsetLeft: number;
                            offsetTop: number;
                            scale: number;
                        } | undefined;
                        ShadowRoot: ShadowRoot;
                    } | {
                        addEventListener: (type: string, listener: EventListener | EventListenerObject | null, options?: boolean | AddEventListenerOptions | undefined) => void;
                        dispatchEvent: (event: Event) => boolean;
                        removeEventListener: (type: string, callback: EventListener | EventListenerObject | null, options?: boolean | EventListenerOptions | undefined) => void;
                        width: number;
                        height: number;
                        offsetLeft: number;
                        offsetTop: number;
                        scale: number;
                    })[];
                    popper: (Element | {
                        innerHeight: number;
                        offsetHeight: number;
                        innerWidth: number;
                        offsetWidth: number;
                        pageXOffset: number;
                        pageYOffset: number;
                        getComputedStyle: typeof getComputedStyle;
                        addEventListener: (type: any, listener: any, optionsOrUseCapture?: any) => void;
                        removeEventListener: (type: any, listener: any, optionsOrUseCapture?: any) => void;
                        Element: Element;
                        HTMLElement: HTMLElement;
                        Node: Node;
                        toString: () => "[object Window]";
                        devicePixelRatio: number;
                        visualViewport?: {
                            addEventListener: (type: string, listener: EventListener | EventListenerObject | null, options?: boolean | AddEventListenerOptions | undefined) => void;
                            dispatchEvent: (event: Event) => boolean;
                            removeEventListener: (type: string, callback: EventListener | EventListenerObject | null, options?: boolean | EventListenerOptions | undefined) => void;
                            width: number;
                            height: number;
                            offsetLeft: number;
                            offsetTop: number;
                            scale: number;
                        } | undefined;
                        ShadowRoot: ShadowRoot;
                    } | {
                        addEventListener: (type: string, listener: EventListener | EventListenerObject | null, options?: boolean | AddEventListenerOptions | undefined) => void;
                        dispatchEvent: (event: Event) => boolean;
                        removeEventListener: (type: string, callback: EventListener | EventListenerObject | null, options?: boolean | EventListenerOptions | undefined) => void;
                        width: number;
                        height: number;
                        offsetLeft: number;
                        offsetTop: number;
                        scale: number;
                    })[];
                };
                styles: {
                    [x: string]: {
                        [x: number]: string | undefined;
                        alignContent?: string | undefined;
                        alignItems?: string | undefined;
                        alignSelf?: string | undefined;
                        alignmentBaseline?: string | undefined;
                        all?: string | undefined;
                        animation?: string | undefined;
                        animationDelay?: string | undefined;
                        animationDirection?: string | undefined;
                        animationDuration?: string | undefined;
                        animationFillMode?: string | undefined;
                        animationIterationCount?: string | undefined;
                        animationName?: string | undefined;
                        animationPlayState?: string | undefined;
                        animationTimingFunction?: string | undefined;
                        backfaceVisibility?: string | undefined;
                        background?: string | undefined;
                        backgroundAttachment?: string | undefined;
                        backgroundClip?: string | undefined;
                        backgroundColor?: string | undefined;
                        backgroundImage?: string | undefined;
                        backgroundOrigin?: string | undefined;
                        backgroundPosition?: string | undefined;
                        backgroundPositionX?: string | undefined;
                        backgroundPositionY?: string | undefined;
                        backgroundRepeat?: string | undefined;
                        backgroundSize?: string | undefined;
                        baselineShift?: string | undefined;
                        blockSize?: string | undefined;
                        border?: string | undefined;
                        borderBlockEnd?: string | undefined;
                        borderBlockEndColor?: string | undefined;
                        borderBlockEndStyle?: string | undefined;
                        borderBlockEndWidth?: string | undefined;
                        borderBlockStart?: string | undefined;
                        borderBlockStartColor?: string | undefined;
                        borderBlockStartStyle?: string | undefined;
                        borderBlockStartWidth?: string | undefined;
                        borderBottom?: string | undefined;
                        borderBottomColor?: string | undefined;
                        borderBottomLeftRadius?: string | undefined;
                        borderBottomRightRadius?: string | undefined;
                        borderBottomStyle?: string | undefined;
                        borderBottomWidth?: string | undefined;
                        borderCollapse?: string | undefined;
                        borderColor?: string | undefined;
                        borderImage?: string | undefined;
                        borderImageOutset?: string | undefined;
                        borderImageRepeat?: string | undefined;
                        borderImageSlice?: string | undefined;
                        borderImageSource?: string | undefined;
                        borderImageWidth?: string | undefined;
                        borderInlineEnd?: string | undefined;
                        borderInlineEndColor?: string | undefined;
                        borderInlineEndStyle?: string | undefined;
                        borderInlineEndWidth?: string | undefined;
                        borderInlineStart?: string | undefined;
                        borderInlineStartColor?: string | undefined;
                        borderInlineStartStyle?: string | undefined;
                        borderInlineStartWidth?: string | undefined;
                        borderLeft?: string | undefined;
                        borderLeftColor?: string | undefined;
                        borderLeftStyle?: string | undefined;
                        borderLeftWidth?: string | undefined;
                        borderRadius?: string | undefined;
                        borderRight?: string | undefined;
                        borderRightColor?: string | undefined;
                        borderRightStyle?: string | undefined;
                        borderRightWidth?: string | undefined;
                        borderSpacing?: string | undefined;
                        borderStyle?: string | undefined;
                        borderTop?: string | undefined;
                        borderTopColor?: string | undefined;
                        borderTopLeftRadius?: string | undefined;
                        borderTopRightRadius?: string | undefined;
                        borderTopStyle?: string | undefined;
                        borderTopWidth?: string | undefined;
                        borderWidth?: string | undefined;
                        bottom?: string | undefined;
                        boxShadow?: string | undefined;
                        boxSizing?: string | undefined;
                        breakAfter?: string | undefined;
                        breakBefore?: string | undefined;
                        breakInside?: string | undefined;
                        captionSide?: string | undefined;
                        caretColor?: string | undefined;
                        clear?: string | undefined;
                        clip?: string | undefined;
                        clipPath?: string | undefined;
                        clipRule?: string | undefined;
                        color?: string | undefined;
                        colorInterpolation?: string | undefined;
                        colorInterpolationFilters?: string | undefined;
                        columnCount?: string | undefined;
                        columnFill?: string | undefined;
                        columnGap?: string | undefined;
                        columnRule?: string | undefined;
                        columnRuleColor?: string | undefined;
                        columnRuleStyle?: string | undefined;
                        columnRuleWidth?: string | undefined;
                        columnSpan?: string | undefined;
                        columnWidth?: string | undefined;
                        columns?: string | undefined;
                        content?: string | undefined;
                        counterIncrement?: string | undefined;
                        counterReset?: string | undefined;
                        cssFloat?: string | undefined;
                        cssText?: string | undefined;
                        cursor?: string | undefined;
                        direction?: string | undefined;
                        display?: string | undefined;
                        dominantBaseline?: string | undefined;
                        emptyCells?: string | undefined;
                        fill?: string | undefined;
                        fillOpacity?: string | undefined;
                        fillRule?: string | undefined;
                        filter?: string | undefined;
                        flex?: string | undefined;
                        flexBasis?: string | undefined;
                        flexDirection?: string | undefined;
                        flexFlow?: string | undefined;
                        flexGrow?: string | undefined;
                        flexShrink?: string | undefined;
                        flexWrap?: string | undefined;
                        float?: string | undefined;
                        floodColor?: string | undefined;
                        floodOpacity?: string | undefined;
                        font?: string | undefined;
                        fontFamily?: string | undefined;
                        fontFeatureSettings?: string | undefined;
                        fontKerning?: string | undefined;
                        fontSize?: string | undefined;
                        fontSizeAdjust?: string | undefined;
                        fontStretch?: string | undefined;
                        fontStyle?: string | undefined;
                        fontSynthesis?: string | undefined;
                        fontVariant?: string | undefined;
                        fontVariantCaps?: string | undefined;
                        fontVariantEastAsian?: string | undefined;
                        fontVariantLigatures?: string | undefined;
                        fontVariantNumeric?: string | undefined;
                        fontVariantPosition?: string | undefined;
                        fontWeight?: string | undefined;
                        gap?: string | undefined;
                        glyphOrientationVertical?: string | undefined;
                        grid?: string | undefined;
                        gridArea?: string | undefined;
                        gridAutoColumns?: string | undefined;
                        gridAutoFlow?: string | undefined;
                        gridAutoRows?: string | undefined;
                        gridColumn?: string | undefined;
                        gridColumnEnd?: string | undefined;
                        gridColumnGap?: string | undefined;
                        gridColumnStart?: string | undefined;
                        gridGap?: string | undefined;
                        gridRow?: string | undefined;
                        gridRowEnd?: string | undefined;
                        gridRowGap?: string | undefined;
                        gridRowStart?: string | undefined;
                        gridTemplate?: string | undefined;
                        gridTemplateAreas?: string | undefined;
                        gridTemplateColumns?: string | undefined;
                        gridTemplateRows?: string | undefined;
                        height?: string | undefined;
                        hyphens?: string | undefined;
                        imageOrientation?: string | undefined;
                        imageRendering?: string | undefined;
                        inlineSize?: string | undefined;
                        justifyContent?: string | undefined;
                        justifyItems?: string | undefined;
                        justifySelf?: string | undefined;
                        left?: string | undefined;
                        readonly length?: number | undefined;
                        letterSpacing?: string | undefined;
                        lightingColor?: string | undefined;
                        lineBreak?: string | undefined;
                        lineHeight?: string | undefined;
                        listStyle?: string | undefined;
                        listStyleImage?: string | undefined;
                        listStylePosition?: string | undefined;
                        listStyleType?: string | undefined;
                        margin?: string | undefined;
                        marginBlockEnd?: string | undefined;
                        marginBlockStart?: string | undefined;
                        marginBottom?: string | undefined;
                        marginInlineEnd?: string | undefined;
                        marginInlineStart?: string | undefined;
                        marginLeft?: string | undefined;
                        marginRight?: string | undefined;
                        marginTop?: string | undefined;
                        marker?: string | undefined;
                        markerEnd?: string | undefined;
                        markerMid?: string | undefined;
                        markerStart?: string | undefined;
                        mask?: string | undefined;
                        maskComposite?: string | undefined;
                        maskImage?: string | undefined;
                        maskPosition?: string | undefined;
                        maskRepeat?: string | undefined;
                        maskSize?: string | undefined;
                        maskType?: string | undefined;
                        maxBlockSize?: string | undefined;
                        maxHeight?: string | undefined;
                        maxInlineSize?: string | undefined;
                        maxWidth?: string | undefined;
                        minBlockSize?: string | undefined;
                        minHeight?: string | undefined;
                        minInlineSize?: string | undefined;
                        minWidth?: string | undefined;
                        objectFit?: string | undefined;
                        objectPosition?: string | undefined;
                        opacity?: string | undefined;
                        order?: string | undefined;
                        orphans?: string | undefined;
                        outline?: string | undefined;
                        outlineColor?: string | undefined;
                        outlineOffset?: string | undefined;
                        outlineStyle?: string | undefined;
                        outlineWidth?: string | undefined;
                        overflow?: string | undefined;
                        overflowAnchor?: string | undefined;
                        overflowWrap?: string | undefined;
                        overflowX?: string | undefined;
                        overflowY?: string | undefined;
                        overscrollBehavior?: string | undefined;
                        overscrollBehaviorBlock?: string | undefined;
                        overscrollBehaviorInline?: string | undefined;
                        overscrollBehaviorX?: string | undefined;
                        overscrollBehaviorY?: string | undefined;
                        padding?: string | undefined;
                        paddingBlockEnd?: string | undefined;
                        paddingBlockStart?: string | undefined;
                        paddingBottom?: string | undefined;
                        paddingInlineEnd?: string | undefined;
                        paddingInlineStart?: string | undefined;
                        paddingLeft?: string | undefined;
                        paddingRight?: string | undefined;
                        paddingTop?: string | undefined;
                        pageBreakAfter?: string | undefined;
                        pageBreakBefore?: string | undefined;
                        pageBreakInside?: string | undefined;
                        paintOrder?: string | undefined;
                        readonly parentRule?: {
                            cssText: string;
                            readonly parentRule: any | null;
                            readonly parentStyleSheet: {
                                readonly cssRules: {
                                    [x: number]: any;
                                    readonly length: number;
                                    item: (index: number) => CSSRule | null;
                                };
                                readonly ownerRule: any | null;
                                readonly rules: {
                                    [x: number]: any;
                                    readonly length: number;
                                    item: (index: number) => CSSRule | null;
                                };
                                addRule: (selector?: string | undefined, style?: string | undefined, index?: number | undefined) => number;
                                deleteRule: (index: number) => void;
                                insertRule: (rule: string, index?: number | undefined) => number;
                                removeRule: (index?: number | undefined) => void;
                                disabled: boolean;
                                readonly href: string | null;
                                readonly media: {
                                    [x: number]: string;
                                    readonly length: number;
                                    mediaText: string;
                                    toString: () => string;
                                    appendMedium: (medium: string) => void;
                                    deleteMedium: (medium: string) => void;
                                    item: (index: number) => string | null;
                                };
                                readonly ownerNode: Element | ProcessingInstruction | null;
                                readonly parentStyleSheet: any | null;
                                readonly title: string | null;
                                readonly type: string;
                            } | null;
                            readonly type: number;
                            readonly CHARSET_RULE: number;
                            readonly FONT_FACE_RULE: number;
                            readonly IMPORT_RULE: number;
                            readonly KEYFRAMES_RULE: number;
                            readonly KEYFRAME_RULE: number;
                            readonly MEDIA_RULE: number;
                            readonly NAMESPACE_RULE: number;
                            readonly PAGE_RULE: number;
                            readonly STYLE_RULE: number;
                            readonly SUPPORTS_RULE: number;
                        } | null | undefined;
                        perspective?: string | undefined;
                        perspectiveOrigin?: string | undefined;
                        placeContent?: string | undefined;
                        placeItems?: string | undefined;
                        placeSelf?: string | undefined;
                        pointerEvents?: string | undefined;
                        position?: string | undefined;
                        quotes?: string | undefined;
                        resize?: string | undefined;
                        right?: string | undefined;
                        rotate?: string | undefined;
                        rowGap?: string | undefined;
                        rubyAlign?: string | undefined;
                        rubyPosition?: string | undefined;
                        scale?: string | undefined;
                        scrollBehavior?: string | undefined;
                        shapeRendering?: string | undefined;
                        stopColor?: string | undefined;
                        stopOpacity?: string | undefined;
                        stroke?: string | undefined;
                        strokeDasharray?: string | undefined;
                        strokeDashoffset?: string | undefined;
                        strokeLinecap?: string | undefined;
                        strokeLinejoin?: string | undefined;
                        strokeMiterlimit?: string | undefined;
                        strokeOpacity?: string | undefined;
                        strokeWidth?: string | undefined;
                        tabSize?: string | undefined;
                        tableLayout?: string | undefined;
                        textAlign?: string | undefined;
                        textAlignLast?: string | undefined;
                        textAnchor?: string | undefined;
                        textCombineUpright?: string | undefined;
                        textDecoration?: string | undefined;
                        textDecorationColor?: string | undefined;
                        textDecorationLine?: string | undefined;
                        textDecorationStyle?: string | undefined;
                        textEmphasis?: string | undefined;
                        textEmphasisColor?: string | undefined;
                        textEmphasisPosition?: string | undefined;
                        textEmphasisStyle?: string | undefined;
                        textIndent?: string | undefined;
                        textJustify?: string | undefined;
                        textOrientation?: string | undefined;
                        textOverflow?: string | undefined;
                        textRendering?: string | undefined;
                        textShadow?: string | undefined;
                        textTransform?: string | undefined;
                        textUnderlinePosition?: string | undefined;
                        top?: string | undefined;
                        touchAction?: string | undefined;
                        transform?: string | undefined;
                        transformBox?: string | undefined;
                        transformOrigin?: string | undefined;
                        transformStyle?: string | undefined;
                        transition?: string | undefined;
                        transitionDelay?: string | undefined;
                        transitionDuration?: string | undefined;
                        transitionProperty?: string | undefined;
                        transitionTimingFunction?: string | undefined;
                        translate?: string | undefined;
                        unicodeBidi?: string | undefined;
                        userSelect?: string | undefined;
                        verticalAlign?: string | undefined;
                        visibility?: string | undefined;
                        webkitAlignContent?: string | undefined;
                        webkitAlignItems?: string | undefined;
                        webkitAlignSelf?: string | undefined;
                        webkitAnimation?: string | undefined;
                        webkitAnimationDelay?: string | undefined;
                        webkitAnimationDirection?: string | undefined;
                        webkitAnimationDuration?: string | undefined;
                        webkitAnimationFillMode?: string | undefined;
                        webkitAnimationIterationCount?: string | undefined;
                        webkitAnimationName?: string | undefined;
                        webkitAnimationPlayState?: string | undefined;
                        webkitAnimationTimingFunction?: string | undefined;
                        webkitAppearance?: string | undefined;
                        webkitBackfaceVisibility?: string | undefined;
                        webkitBackgroundClip?: string | undefined;
                        webkitBackgroundOrigin?: string | undefined;
                        webkitBackgroundSize?: string | undefined;
                        webkitBorderBottomLeftRadius?: string | undefined;
                        webkitBorderBottomRightRadius?: string | undefined;
                        webkitBorderRadius?: string | undefined;
                        webkitBorderTopLeftRadius?: string | undefined;
                        webkitBorderTopRightRadius?: string | undefined;
                        webkitBoxAlign?: string | undefined;
                        webkitBoxFlex?: string | undefined;
                        webkitBoxOrdinalGroup?: string | undefined;
                        webkitBoxOrient?: string | undefined;
                        webkitBoxPack?: string | undefined;
                        webkitBoxShadow?: string | undefined;
                        webkitBoxSizing?: string | undefined;
                        webkitFilter?: string | undefined;
                        webkitFlex?: string | undefined;
                        webkitFlexBasis?: string | undefined;
                        webkitFlexDirection?: string | undefined;
                        webkitFlexFlow?: string | undefined;
                        webkitFlexGrow?: string | undefined;
                        webkitFlexShrink?: string | undefined;
                        webkitFlexWrap?: string | undefined;
                        webkitJustifyContent?: string | undefined;
                        webkitLineClamp?: string | undefined;
                        webkitMask?: string | undefined;
                        webkitMaskBoxImage?: string | undefined;
                        webkitMaskBoxImageOutset?: string | undefined;
                        webkitMaskBoxImageRepeat?: string | undefined;
                        webkitMaskBoxImageSlice?: string | undefined;
                        webkitMaskBoxImageSource?: string | undefined;
                        webkitMaskBoxImageWidth?: string | undefined;
                        webkitMaskClip?: string | undefined;
                        webkitMaskComposite?: string | undefined;
                        webkitMaskImage?: string | undefined;
                        webkitMaskOrigin?: string | undefined;
                        webkitMaskPosition?: string | undefined;
                        webkitMaskRepeat?: string | undefined;
                        webkitMaskSize?: string | undefined;
                        webkitOrder?: string | undefined;
                        webkitPerspective?: string | undefined;
                        webkitPerspectiveOrigin?: string | undefined;
                        webkitTapHighlightColor?: string | undefined;
                        webkitTextFillColor?: string | undefined;
                        webkitTextSizeAdjust?: string | undefined;
                        webkitTextStroke?: string | undefined;
                        webkitTextStrokeColor?: string | undefined;
                        webkitTextStrokeWidth?: string | undefined;
                        webkitTransform?: string | undefined;
                        webkitTransformOrigin?: string | undefined;
                        webkitTransformStyle?: string | undefined;
                        webkitTransition?: string | undefined;
                        webkitTransitionDelay?: string | undefined;
                        webkitTransitionDuration?: string | undefined;
                        webkitTransitionProperty?: string | undefined;
                        webkitTransitionTimingFunction?: string | undefined;
                        webkitUserSelect?: string | undefined;
                        whiteSpace?: string | undefined;
                        widows?: string | undefined;
                        width?: string | undefined;
                        willChange?: string | undefined;
                        wordBreak?: string | undefined;
                        wordSpacing?: string | undefined;
                        wordWrap?: string | undefined;
                        writingMode?: string | undefined;
                        zIndex?: string | undefined;
                        zoom?: string | undefined;
                        getPropertyPriority?: ((property: string) => string) | undefined;
                        getPropertyValue?: ((property: string) => string) | undefined;
                        item?: ((index: number) => string) | undefined;
                        removeProperty?: ((property: string) => string) | undefined;
                        setProperty?: ((property: string, value: string | null, priority?: string | undefined) => void) | undefined;
                    };
                };
                attributes: {
                    [x: string]: {
                        [x: string]: string | boolean;
                    };
                };
                modifiersData: {
                    [x: string]: any;
                    arrow?: {
                        x?: number | undefined;
                        y?: number | undefined;
                        centerOffset: number;
                    } | undefined;
                    hide?: {
                        isReferenceHidden: boolean;
                        hasPopperEscaped: boolean;
                        referenceClippingOffsets: {
                            top: number;
                            left: number;
                            right: number;
                            bottom: number;
                        };
                        popperEscapeOffsets: {
                            top: number;
                            left: number;
                            right: number;
                            bottom: number;
                        };
                    } | undefined;
                    offset?: {
                        auto?: {
                            y: number;
                            x: number;
                        } | undefined;
                        "auto-start"?: {
                            y: number;
                            x: number;
                        } | undefined;
                        "auto-end"?: {
                            y: number;
                            x: number;
                        } | undefined;
                        top?: {
                            y: number;
                            x: number;
                        } | undefined;
                        bottom?: {
                            y: number;
                            x: number;
                        } | undefined;
                        right?: {
                            y: number;
                            x: number;
                        } | undefined;
                        left?: {
                            y: number;
                            x: number;
                        } | undefined;
                        "top-start"?: {
                            y: number;
                            x: number;
                        } | undefined;
                        "top-end"?: {
                            y: number;
                            x: number;
                        } | undefined;
                        "bottom-start"?: {
                            y: number;
                            x: number;
                        } | undefined;
                        "bottom-end"?: {
                            y: number;
                            x: number;
                        } | undefined;
                        "right-start"?: {
                            y: number;
                            x: number;
                        } | undefined;
                        "right-end"?: {
                            y: number;
                            x: number;
                        } | undefined;
                        "left-start"?: {
                            y: number;
                            x: number;
                        } | undefined;
                        "left-end"?: {
                            y: number;
                            x: number;
                        } | undefined;
                    } | undefined;
                    preventOverflow?: {
                        y: number;
                        x: number;
                    } | undefined;
                    popperOffsets?: {
                        y: number;
                        x: number;
                    } | undefined;
                };
                reset: boolean;
            };
            destroy: () => void;
            forceUpdate: () => void;
            update: () => Promise<Partial<import("@popperjs/core").State>>;
            setOptions: (options: Partial<import("@popperjs/core").OptionsGeneric<any>>) => Promise<Partial<import("@popperjs/core").State>>;
        } | null;
        props: any;
        reference: import("tippy.js").ReferenceElement<any>;
        setContent: (content: import("tippy.js").Content) => void;
        setProps: (partialProps: Partial<any>) => void;
        show: () => void;
        state: {
            isEnabled: boolean;
            isVisible: boolean;
            isDestroyed: boolean;
            isMounted: boolean;
            isShown: boolean;
        };
        unmount: () => void;
    }[]>;
    singleton: import("vue").Ref<import("tippy.js").CreateSingletonInstance<import("tippy.js").CreateSingletonProps<import("tippy.js").Props>> | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{} & {
    [x: string]: any;
}>, {}>;

export declare type TippyTarget = Element | Element[] | Ref<Element | undefined> | Ref<Element[] | undefined> | null;

export declare function useSingleton(instances: TippyInstances, optionalProps?: Partial<CreateSingletonProps<Props>>): {
    singleton: import("vue").Ref<import("tippy.js").CreateSingletonInstance<CreateSingletonProps<Props>> | undefined>;
};

export declare function useTippy(el: Element | (() => Element) | Ref<Element> | Ref<Element | undefined>, opts?: TippyOptions, settings?: {
    mount: boolean;
}): {
    tippy: Ref<Instance<Props> | undefined>;
    refresh: () => void;
    refreshContent: () => void;
    setContent: (value: TippyContent) => void;
    setProps: (value: TippyOptions) => void;
    destroy: () => void;
    hide: () => void;
    show: () => void;
    disable: () => void;
    enable: () => void;
    unmount: () => void;
    mount: () => void;
};

export declare function useTippyComponent(opts?: TippyOptions, children?: any): {
    instance: import("vue").Ref<any>;
    TippyComponent: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
};

export { }
